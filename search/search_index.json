{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intensive Brew","text":"<p>Generate LocustTest custom resources with ease!</p> <p></p>"},{"location":"#at-a-glance","title":"At a glance","text":"<p>Intensive Brew is a simple cli tool that converts a declarative yaml configuration into a compatible Locust Kubernetes Operator custom resource. It provides a user-friendly abstraction layer that allow for simple and direct declaration of test requirements to be converted into a valid custom resource. It can also be part of the CI pipelines. </p>"},{"location":"test-config/","title":"YAML configuration","text":"<p>In order to generate a valid LocustTest custom resource, a valid yaml configuration should be prepared.</p> <p>The following sections will break-down the supported configuration and provide the full YAML spec at the end.</p> <p>Note</p> <pre><code>Although all following examples are for a single test, _Intensive Brew_ supports having several _test_ configurations in the same `.yaml` file.\n</code></pre>"},{"location":"test-config/#locust-configuration","title":"Locust configuration","text":"<p>This sections highlight all the available options that would impact the configuration of Locust. </p>"},{"location":"test-config/#test-entry-point","title":"Test entry point","text":"<p><code>entry_point: str</code> is a mandatory field that allows Intensive Brew to know which <code>.py</code> file to use as an entry to locust.</p> test-config.yaml<pre><code>configurations:\n  ...\n  test_name:\n    entry_point: \"&lt;path&gt;/demo.py\" # (1)!\n</code></pre> <ol> <li>The provided <code>path</code> must be relative to the location of <code>test-config.yaml</code>.</li> </ol>"},{"location":"test-config/#test-load-requirements","title":"Test load requirements","text":"<p><code>vanilla_specs: object</code> is a mandatory section that can be used to configure:</p> <ul> <li>Number of users</li> <li>Users spawn rate</li> <li>Test duration</li> <li>Target host of the test</li> <li>Timeout to end all current tasks if run_time was reached [Optional field]</li> </ul> test-config.yaml<pre><code>configurations:\n  ...\n  test_name:\n    ...\n    vanilla_specs:\n      # * Number of users\n      users: int\n      # * Users spawn rate\n      spawn_rate: int\n      # * Test duration\n      run_time: str # (1)!\n      # * Test target URL \n      target_host: str\n      # * Timeout to end current task (sec)\n      termination_timeout: int\n</code></pre> <ol> <li>This field support different was of expressing duration e.g. (<code>300s</code>, <code>20m</code>, <code>3h</code>, <code>1h30m</code>, etc.). Default value is <code>30s</code>.</li> </ol>"},{"location":"test-config/#custom-load-shapes","title":"Custom load shapes","text":"<p><code>custom_load_shapes: bool</code> is an optional flag that enables the support of Locust \"Custom Load Shapes\" feature. This feature doesn't follow the traditional way of declaring users, spawn rate and test run duration.</p> <p>Important</p> <ul> <li>When this flag is set to true, the <code>vanilla_specs</code> section becomes optional and is ignored even if provided.</li> <li>Additional configuration like test target host is expected to be passed through custom config files or directly coded into the test.</li> </ul> test-config.yaml<pre><code>configurations:\n  ...\n  test_name:\n    ...\n    # * Enable \"custom load shapes\" support. Default: false\n    custom_load_shapes: true\n</code></pre>"},{"location":"test-config/#cluster-nodes-configuration","title":"Cluster nodes configuration","text":"<p>This sections highlight all the available options that would impact the configuration of the deployed cluster nodes.</p>"},{"location":"test-config/#locust-container-image","title":"Locust container image","text":"<p><code>image: str</code>  is an optional flag that instructs Intensive Brew to populate the <code>image</code> field in LocustTest. Default is to use the latest Locust image.</p> test-config.yaml<pre><code>configurations:\n  ...\n  test_name:\n    ...\n    image: str\n</code></pre>"},{"location":"test-config/#kubernetes-test-configuration-map","title":"Kubernetes test configuration map","text":"<p><code>configmap: str</code> is an optional flag that instructs Intensive Brew to populate the <code>configMap</code> field in LocustTest. This is a feature supported by the Locust Operator where it is possible to [deploy tests as k8s <code>configMap</code>] and then having it mounted on the load generation pods.</p> test-config.yaml<pre><code>configurations:\n  ...\n  test_name:\n    ...\n    configmap: &lt;valid k8s configMap name&gt;\n</code></pre>"},{"location":"test-config/#worker-replicas-count","title":"Worker replicas count","text":"<p><code>worker_replicas: int</code> is an optional flag that instructs Intensive Brew to populate the <code>workerReplicas</code> field in LocustTest. Default value is 5.</p> test-config.yaml<pre><code>configurations:\n  ...\n  test_name:\n    ...\n    worker_replicas: int\n</code></pre>"},{"location":"test-config/#kubernetes-affinity","title":"Kubernetes Affinity","text":"<p>It is an optional section that instructs Intensive Brew to populate the <code>affinity</code> field in LocustTest. The spec is structured in a similar way as the Operator. </p> test-config.yaml<pre><code>configurations:\n  ...\n  test_name:\n    ...\n    affinity:\n      nodeAffinity:\n        requiredDuringSchedulingIgnoredDuringExecution: # (1)!\n          &lt;label-key&gt;: &lt;label-value&gt; \n</code></pre> <ol> <li>Can contain as many entries as desired.</li> </ol>"},{"location":"test-config/#kubernetes-pod-taint-tolerations","title":"Kubernetes pod taint tolerations","text":"<p>It is an optional flag that instructs Intensive Brew to populate the <code>tolerations</code> field in LocustTest. The spec is structured in a similar way as the Operator.</p> test-config.yaml<pre><code>configurations:\n  ...\n  tolerations: # (1)!\n      - key: &lt;string value&gt;\n        operator: &lt;\"Exists\", \"Equal\"&gt;\n        value: &lt;string value&gt;\n        effect: &lt;\"NoSchedule\", \"PreferNoSchedule\", \"NoExecute\"&gt;\n      ...\n</code></pre> <ol> <li>Can contain as many entries as desired.</li> </ol>"},{"location":"test-config/#expert-mode","title":"Expert mode","text":"<p><code>expert_mode: obj</code> is an optional section that grants direct control over what the LocustTest fields for <code>masterCommandSeed</code> &amp; <code>workerCommandSeed</code> will contain.</p> <p>Important</p> <ul> <li>When this section is set, all other sections from the \"Locust configuration\" section becomes optional and is ignored even if provided.</li> </ul> <p>Warning</p> <ul> <li>Activating this mode will suppress any processing of the data and directly pass the command \"as-is\".</li> <li>If you find yourself using this mode frequently, consider opening a feature request to support your use case instead.  </li> </ul> test-config.yaml<pre><code>configurations:\n  ...\n  test_name:\n    # ! USE WITH CAUTION\n    expert_mode:\n      # * Enable expert mode. Default: false\n      enabled: bool\n      # * Commands to pass \"as-is\"\n      masterCommandSeed: str\n      workerCommandSeed: str\n</code></pre>"},{"location":"test-config/#full-yaml-spec","title":"Full YAML spec","text":"test-config.yaml<pre><code>configurations:\n  # Test name\n  load_test:\n\n    #  Entry point script\n    entry_point: str # (1)!\n\n    # Load requirements\n    vanilla_specs: \n      # Number of users\n      users: int # (2)!\n      # Users spawn rate\n      spawn_rate: int # (3)!\n      # Test duration\n      run_time: str # (4)!\n      # Test target URL \n      target_host: str # (5)!\n      # Timeout to end current task (sec) \n      termination_timeout: int # (11)!\n\n    # Custom load shapes support.\n    custom_load_shapes: bool\n\n    # Locust container image\n    image: str # (8)!\n\n    # Test configuration map\n    configmap: str # (6)!\n\n    # Worker replicas\n    worker_replicas: int # (7)!\n\n    # Kubernetes affinity\n    affinity: # (9)!\n      nodeAffinity:\n        requiredDuringSchedulingIgnoredDuringExecution: \n          &lt;label-key&gt;: &lt;label-value&gt;\n\n    # Kubernetes pod taint toleration      \n    tolerations: # (10)!\n      - key: &lt;string value&gt;\n        operator: &lt;\"Exists\", \"Equal\"&gt;\n        value: &lt;string value&gt;\n        effect: &lt;\"NoSchedule\", \"PreferNoSchedule\", \"NoExecute\"&gt;\n\n    # ! USE WITH  CAUTION\n    expert_mode:\n      # Enable expert mode. Default: false\n      enabled: bool\n      # Commands to pass \"as-is\"\n      masterCommandSeed: str\n      workerCommandSeed: str\n</code></pre> <ol> <li>This field maps to the <code>--locustfile</code> locust switch and appears in <code>masterCommandSeed</code> &amp; <code>workerCommandSeed</code> of the LocustTest custom resource.</li> <li>This field maps to the <code>--users</code> locust switch and appears in <code>masterCommandSeed</code> of the LocustTest custom resource.</li> <li>This field maps to the <code>--spawn-rate</code> locust switch and appears in <code>masterCommandSeed</code> of the LocustTest custom resource.</li> <li>This field maps to the <code>--run-time</code> locust switch and appears in <code>masterCommandSeed</code> of the LocustTest custom resource.</li> <li>This field maps to the <code>--host</code> locust switch and appears in <code>masterCommandSeed</code> of the LocustTest custom resource.</li> <li>This field maps to the <code>configMap</code>  section of the LocustTest custom resource.</li> <li>This field maps to the <code>workerReplicas</code>  section of the LocustTest custom resource.</li> <li>This field maps to the <code>image</code>  section of the LocustTest custom resource.</li> <li>This field directly maps to the <code>affinity</code>  section of the LocustTest custom resource.</li> <li>This field directly maps to the <code>tolerations</code>  section of the LocustTest custom resource.</li> <li>This field maps to the <code>--stop-timeout</code> locust switch and appears in <code>masterCommandSeed</code> of the LocustTest custom resource.</li> </ol>"}]}