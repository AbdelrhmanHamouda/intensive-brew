{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intensive Brew \u2693 Generate LocustTest custom resources with ease! At a glance \u2693 Intensive Brew is a simple cli tool that converts a declarative yaml configuration into a compatible Locust Kubernetes Operator custom resource. It provides a user-friendly abstraction layer that allow for simple and direct declaration of test requirements to be converted into a valid custom resource. It can also be part of the CI pipelines.","title":"Introduction"},{"location":"#intensive-brew","text":"Generate LocustTest custom resources with ease!","title":"Intensive Brew"},{"location":"#at-a-glance","text":"Intensive Brew is a simple cli tool that converts a declarative yaml configuration into a compatible Locust Kubernetes Operator custom resource. It provides a user-friendly abstraction layer that allow for simple and direct declaration of test requirements to be converted into a valid custom resource. It can also be part of the CI pipelines.","title":"At a glance"},{"location":"test-config/","text":"YAML configuration \u2693 In order to generate a valid LocustTest custom resource, a valid yaml configuration should be prepared. The following sections will break-down the supported configuration and provide the full YAML spec at the end. Note Although all following examples are for a single test, Intensive Brew supports having several test configurations in the same .yaml file. Locust configuration \u2693 This sections highlight all the available options that would impact the configuration of Locust . Test entry point \u2693 entry_point: str is a mandatory field that allows Intensive Brew to know which .py file to use as an entry to locust . test-config.yaml configurations : ... test_name : entry_point : \"<path>/demo.py\" # (1)! The provided path must be relative to the location of test-config.yaml . Test load requirements \u2693 vanilla_specs: object is a mandatory section that can be used to configure: Number of users Users spawn rate Test duration Target host of the test test-config.yaml configurations : ... test_name : ... vanilla_specs : # * Number of users users : int # * Users spawn rate spawn_rate : int # * Test duration run_time : str # (1)! # * Test target URL target_host : str This field support different was of expressing duration e.g. ( 300s , 20m , 3h , 1h30m , etc.). Default value is 30s . Custom load shapes \u2693 custom_load_shapes: bool is an optional flag that enables the support of Locust \" Custom Load Shapes \" feature. This feature doesn't follow the traditional way of declaring users, spawn rate and test run duration. Important When this flag is set to true , the vanilla_specs section becomes optional and is ignored even if provided. Additional configuration like test target host is expected to be passed through custom config files or directly coded into the test. test-config.yaml configurations : ... test_name : ... # * Enable \"custom load shapes\" support. Default : false custom_load_shapes : true Cluster nodes configuration \u2693 This sections highlight all the available options that would impact the configuration of the deployed cluster nodes. Locust container image \u2693 image: str is an optional flag that instructs Intensive Brew to populate the image field in LocustTest . Default is to use the latest Locust image. test-config.yaml configurations : ... test_name : ... image : str Kubernetes test configuration map \u2693 configmap: str is an optional flag that instructs Intensive Brew to populate the configMap field in LocustTest . This is a feature supported by the Locust Operator where it is possible to [deploy tests as k8s configMap ] and then having it mounted on the load generation pods. test-config.yaml configurations : ... test_name : ... configmap : <valid k8s configMap name> Worker replicas count \u2693 worker_replicas: int is an optional flag that instructs Intensive Brew to populate the workerReplicas field in LocustTest . Default value is 5. test-config.yaml configurations : ... test_name : ... worker_replicas : int Expert mode \u2693 expert_mode: obj is an optional section that grants direct control over what the LocustTest fields for masterCommandSeed & workerCommandSeed will contain. Important When this section is set, all other sections from the \"Locust configuration\" section becomes optional and is ignored even if provided. Warning Activating this mode will suppress any processing of the data and directly pass the command \"as-is\". If you find yourself using this mode frequently, consider opening a feature request to support your use case instead. test-config.yaml configurations : ... test_name : # ! USE WITH CAUTION expert_mode : # * Enable expert mode. Default: false enabled : bool # * Commands to pass \"as-is\" masterCommandSeed : str workerCommandSeed : str Full YAML spec \u2693 test-config.yaml configurations : # Test name load_test : # Entry point script entry_point : str # (1)! # Load requirements vanilla_specs : # Number of users users : int # (2)! # Users spawn rate spawn_rate : int # (3)! # Test duration run_time : str # (4)! # Test target URL target_host : str # (5)! # Custom load shapes support. custom_load_shapes : bool # Locust container image image : str # (8)! # Test configuration map configmap : str # (6)! # Worker replicas worker_replicas : int # (7)! # ! USE WITH CAUTION expert_mode : # Enable expert mode. Default: false enabled : bool # Commands to pass \"as-is\" masterCommandSeed : str workerCommandSeed : str This field maps to the --locustfile locust switch and appears in masterCommandSeed & workerCommandSeed of the LocustTest custom resource . This field maps to the --users locust switch and appears in masterCommandSeed of the LocustTest custom resource . This field maps to the --spawn-rate locust switch and appears in masterCommandSeed of the LocustTest custom resource . This field maps to the --run-time locust switch and appears in masterCommandSeed of the LocustTest custom resource . This field maps to the --host locust switch and appears in masterCommandSeed of the LocustTest custom resource . This field maps to the configMap section of the LocustTest custom resource . This field maps to the workerReplicas section of the LocustTest custom resource . This field maps to the image section of the LocustTest custom resource .","title":"YAML configuration"},{"location":"test-config/#yaml-configuration","text":"In order to generate a valid LocustTest custom resource, a valid yaml configuration should be prepared. The following sections will break-down the supported configuration and provide the full YAML spec at the end. Note Although all following examples are for a single test, Intensive Brew supports having several test configurations in the same .yaml file.","title":"YAML configuration"},{"location":"test-config/#locust-configuration","text":"This sections highlight all the available options that would impact the configuration of Locust .","title":"Locust configuration"},{"location":"test-config/#test-entry-point","text":"entry_point: str is a mandatory field that allows Intensive Brew to know which .py file to use as an entry to locust . test-config.yaml configurations : ... test_name : entry_point : \"<path>/demo.py\" # (1)! The provided path must be relative to the location of test-config.yaml .","title":"Test entry point"},{"location":"test-config/#test-load-requirements","text":"vanilla_specs: object is a mandatory section that can be used to configure: Number of users Users spawn rate Test duration Target host of the test test-config.yaml configurations : ... test_name : ... vanilla_specs : # * Number of users users : int # * Users spawn rate spawn_rate : int # * Test duration run_time : str # (1)! # * Test target URL target_host : str This field support different was of expressing duration e.g. ( 300s , 20m , 3h , 1h30m , etc.). Default value is 30s .","title":"Test load requirements"},{"location":"test-config/#custom-load-shapes","text":"custom_load_shapes: bool is an optional flag that enables the support of Locust \" Custom Load Shapes \" feature. This feature doesn't follow the traditional way of declaring users, spawn rate and test run duration. Important When this flag is set to true , the vanilla_specs section becomes optional and is ignored even if provided. Additional configuration like test target host is expected to be passed through custom config files or directly coded into the test. test-config.yaml configurations : ... test_name : ... # * Enable \"custom load shapes\" support. Default : false custom_load_shapes : true","title":"Custom load shapes"},{"location":"test-config/#cluster-nodes-configuration","text":"This sections highlight all the available options that would impact the configuration of the deployed cluster nodes.","title":"Cluster nodes configuration"},{"location":"test-config/#locust-container-image","text":"image: str is an optional flag that instructs Intensive Brew to populate the image field in LocustTest . Default is to use the latest Locust image. test-config.yaml configurations : ... test_name : ... image : str","title":"Locust container image"},{"location":"test-config/#kubernetes-test-configuration-map","text":"configmap: str is an optional flag that instructs Intensive Brew to populate the configMap field in LocustTest . This is a feature supported by the Locust Operator where it is possible to [deploy tests as k8s configMap ] and then having it mounted on the load generation pods. test-config.yaml configurations : ... test_name : ... configmap : <valid k8s configMap name>","title":"Kubernetes test configuration map"},{"location":"test-config/#worker-replicas-count","text":"worker_replicas: int is an optional flag that instructs Intensive Brew to populate the workerReplicas field in LocustTest . Default value is 5. test-config.yaml configurations : ... test_name : ... worker_replicas : int","title":"Worker replicas count"},{"location":"test-config/#expert-mode","text":"expert_mode: obj is an optional section that grants direct control over what the LocustTest fields for masterCommandSeed & workerCommandSeed will contain. Important When this section is set, all other sections from the \"Locust configuration\" section becomes optional and is ignored even if provided. Warning Activating this mode will suppress any processing of the data and directly pass the command \"as-is\". If you find yourself using this mode frequently, consider opening a feature request to support your use case instead. test-config.yaml configurations : ... test_name : # ! USE WITH CAUTION expert_mode : # * Enable expert mode. Default: false enabled : bool # * Commands to pass \"as-is\" masterCommandSeed : str workerCommandSeed : str","title":"Expert mode"},{"location":"test-config/#full-yaml-spec","text":"test-config.yaml configurations : # Test name load_test : # Entry point script entry_point : str # (1)! # Load requirements vanilla_specs : # Number of users users : int # (2)! # Users spawn rate spawn_rate : int # (3)! # Test duration run_time : str # (4)! # Test target URL target_host : str # (5)! # Custom load shapes support. custom_load_shapes : bool # Locust container image image : str # (8)! # Test configuration map configmap : str # (6)! # Worker replicas worker_replicas : int # (7)! # ! USE WITH CAUTION expert_mode : # Enable expert mode. Default: false enabled : bool # Commands to pass \"as-is\" masterCommandSeed : str workerCommandSeed : str This field maps to the --locustfile locust switch and appears in masterCommandSeed & workerCommandSeed of the LocustTest custom resource . This field maps to the --users locust switch and appears in masterCommandSeed of the LocustTest custom resource . This field maps to the --spawn-rate locust switch and appears in masterCommandSeed of the LocustTest custom resource . This field maps to the --run-time locust switch and appears in masterCommandSeed of the LocustTest custom resource . This field maps to the --host locust switch and appears in masterCommandSeed of the LocustTest custom resource . This field maps to the configMap section of the LocustTest custom resource . This field maps to the workerReplicas section of the LocustTest custom resource . This field maps to the image section of the LocustTest custom resource .","title":"Full YAML spec"}]}